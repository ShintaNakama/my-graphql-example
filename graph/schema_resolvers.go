package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.26

import (
	"context"

	"github.com/ShintaNakama/my-graphql-example/domain/entity"
	"github.com/ShintaNakama/my-graphql-example/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	e := &entity.NewTodo{
		ID:     input.ID,
		Text:   input.Text,
		UserID: input.UserID,
	}

	if err := r.repo.Todos().Insert(ctx, e); err != nil {
		return nil, err
	}

	return &model.Todo{
		ID:     e.ID,
		Text:   e.Text,
		Done:   false,
		UserID: e.UserID,
	}, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	e := &entity.User{
		ID:   input.ID,
		Name: input.Name,
	}

	if err := r.repo.Users().Insert(ctx, e); err != nil {
		return nil, err
	}

	return &model.User{
		ID:   e.ID,
		Name: e.Name,
	}, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	todos, err := r.repo.Todos().List(ctx)
	if err != nil {
		return nil, err
	}

	res := make([]*model.Todo, 0, len(todos))
	for _, todo := range todos {
		res = append(res, &model.Todo{
			ID:     todo.ID,
			Text:   todo.Text,
			Done:   todo.Done,
			UserID: todo.UserID,
		})
	}

	return res, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	users, err := r.repo.Users().List(ctx)
	if err != nil {
		return nil, err
	}

	res := make([]*model.User, 0, len(users))
	for _, user := range users {
		res = append(res, &model.User{
			ID:   user.ID,
			Name: user.Name,
		})
	}

	return res, nil
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *model.Todo) (*model.User, error) {
	user, err := r.repo.Users().GetByID(ctx, obj.UserID)
	if err != nil {
		return nil, err
	}

	return &model.User{
		ID:   user.ID,
		Name: user.Name,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
